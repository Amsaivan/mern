// Question 3: MongoDB Aggregation Consider a MongoDB collection named sales with documents structured as follows:

// json:

// {

//     "_id": ObjectId("..."),

//     "date": ISODate("2024-06-15T00:00:00Z"),

//     "store": "Store A",

//     "items": [

//         {

//             "name": "item1",

//             "quantity": 5,

//             "price": 10.0

//         },

//         {

//             "name": "item2",

//             "quantity": 3,

//             "price": 20.0

//         }

//     ]

// }

// Your task is to write an aggregation pipeline to calculate the total revenue generated by each store for each month, along with the average price of items sold. The result should be sorted first by store and then by month (in ascending order).

// The expected output should be something like this:

// json:

// [

//     {

//         "store": "Store A",

//         "month": "2024-06",

//         "total Revenue": 230.0,

//         "averagePrice": 15.0

//     },

//     {

//         "store": "Store B",

//         "month": "2024-06",

//         "totalRevenue": 150.0,

//         "averagePrice": 12.5

//     }

// ]

db.sales.aggregate([
    // Step 1: Unwind the items array
    {
      $unwind: "$items"
    },
    // Step 2: Project necessary fields and calculate item revenue
    {
      $project: {
        store: 1,
        yearMonth: { 
          $dateToString: { format: "%Y-%m", date: "$date" }  // Extract Year-Month
        },
        revenue: { 
          $multiply: ["$items.quantity", "$items.price"]  // Calculate revenue per item
        },
        price: "$items.price"  // Keep the price for average calculation
      }
    },
    // Step 3: Group by store and month to calculate total revenue and average price
    {
      $group: {
        _id: {
          store: "$store",
          month: "$yearMonth"
        },
        totalRevenue: { $sum: "$revenue" },  // Sum of revenues
        averagePrice: { $avg: "$price" }  // Average price of items
      }
    },
    // Step 4: Reshape the document for the desired output format
    {
      $project: {
        _id: 0,
        store: "$_id.store",
        month: "$_id.month",
        totalRevenue: 1,
        averagePrice: { $round: ["$averagePrice", 2] }  // Round average price to 2 decimals
      }
    },
    // Step 5: Sort by store and then by month
    {
      $sort: { store: 1, month: 1 }
    }
  ])
  
